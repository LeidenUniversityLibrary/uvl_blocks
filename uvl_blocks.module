<?php

/**
* Implements hook_block_info().
*/
function uvl_blocks_block_info() {
  $blocks['uvl_blocks_collection_images'] = array(
    'info' => t('UVL collection images block'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['uvl_blocks_reset_facets'] = array(
    'info' => t('UVL Reset filters'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['uvl_blocks_featured_more'] = array(
    'info' => t('UVL featured more block'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['uvl_blocks_featured_search'] = array(
    'info' => t('UVL featured search block'),
    'cache' => DRUPAL_NO_CACHE
  );
  return $blocks;
}

/**
* Implements hook_block_view().
 */
function uvl_blocks_block_view($delta = '') {
  $block = [];
  
  switch ($delta) {
    case 'uvl_blocks_collection_images':
      $block['content'] = uvl_blocks_collection_images_content();
      break;
    case 'uvl_blocks_reset_facets':
      $block['content'] = uvl_blocks_reset_facets_content();
      break;
    case 'uvl_blocks_featured_more':
      $block['content'] = uvl_blocks_featured_readmore_content();
      break;
    case 'uvl_blocks_featured_search':
      $block['content'] = uvl_blocks_featured_search_content();
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function uvl_blocks_block_configure($delta = '') {
  $form = [];
  if ($delta == 'uvl_blocks_featured_more') {
    $form['link_title'] = [
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#description' => t('Link title. Defaults to "See all items"'),
      '#default_value' => variable_get('featured_link_title', 'See all items'),
      '#size' => 60,
    ];
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function uvl_blocks_block_save($delta = '', $edit = []) {
  if ($delta == 'uvl_blocks_featured_more') {
    variable_set('featured_link_title', $edit['link_title']);
  }
}

/**
* Implements hook_theme().
 */
function uvl_blocks_theme() {
  $module_path = drupal_get_path('module', 'uvl_blocks');
  $base = [
    'path' => "$module_path/templates",
  ];
  return [
    'uvl_blocks_block_content' => $base + [
      'template'      => 'uvl_blocks_block',
      'original hook' => 'block',
    ],
  ];
}

/**
 * Render the content of the block on the collections page.
 */
function uvl_blocks_collection_images_content(){
  $items = [];

  // Only act on a collection page
  if (strpos(arg(2), 'collection:') !== false) {
    $pid = arg(2);
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'collection')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_pid', 'value', $pid, '=')
      ->range(0, 1);
    $result = $query->execute();

    // Check if there is a node
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $nodes = entity_load('node', $nids);
      $node = reset($nodes);
      $items = array();
      // Add a mor button to the images
      $items['button-more']['text'] = t('Show all items');
      $items['button-more']['link'] =  '/islandora/search?type=dismax&islandora_solr_search_navigation=0&f[0]=RELS_EXT_isMemberOfCollection_uri_ms:%22info\:fedora\/'. str_replace(':', '\:' , $pid).'%22';

      if ($node !== FALSE && isset($node->field_intro_image[LANGUAGE_NONE])) {
        $i = 0;
        // Get all images
        foreach ($node->field_intro_image[LANGUAGE_NONE] as $image_file){
          if ($image_file) {
  
            $image_path = '';
            if (isset($image_file['uri'])) {
              $image_path = $image_file['uri'];
            }
            $desc = '';
            $link = '';
            $title ='';
            if(!empty($node->field_intro_image_link[LANGUAGE_NONE][$i]) ){
              $link = $node->field_intro_image_link[LANGUAGE_NONE][$i];
              $desc = $link['title'];
              $title =$link['title'];
              $link = $link['url'];
            }
            $image = theme('image',array(
              'path' => ($image_path),
              'title' => $desc,
              'attributes' => array('class' => 'dc-object-fit'),
            ));
  
            $items['feat-browser'][$i] = array(
              '#tree' => TRUE,
              'image' => array(
                '#prefix' => '<li class="dc-grid-item"><a href="'.
                  $link.'"><div class="dc-grid-pic">',
                '#type' => 'markup',
                '#markup' => $image,
                '#suffix' => '</div>',
              ),
              'title' => array(
                '#prefix' => '<div class="dc-grid-caption">',
                '#type' => 'markup',
                '#markup' => '<h3>'.$title.'</h3><div>'.$desc.'</div>',
                '#suffix' => '</a></li>',
              ),
            );
          }
          $i++;
        }
      }
    }
  }
  return theme('uvl_blocks_block_content', array('items' => $items));
}


/**
 * Implements hook_page_alter().
 *
 * We need this to disable the sidebar region when a search on a collection
 * has been done and there is a node to represent the collection.
 */
function uvl_blocks_page_alter(&$page) {
  // Only act on a collection page
  if (strpos(arg(2), 'collection:') !== false) {
    $pid = arg(2);
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'collection')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_pid', 'value', $pid, '=')
      ->range(0, 1);
    $result = $query->execute();

    // Check if there is a node
    if (isset($result['node'])) {
      // There is a node so disable the sidebar
      unset($page['sidebar_first']);
    }
  }
}

/**
 * Render the link to reset the filters.
 */
function uvl_blocks_reset_facets_content(){
  // Get the current url
  $current_path  = request_uri();

  $content = '';

  // Parse the url
  $parsed_url = drupal_parse_url($current_path);

  //Check if facet param is set
  if (!empty($parsed_url['query']['f'])){
    //We have an facet in the url so unset the facets
    unset($parsed_url['query']['f']);
    //Rebuild the url including query params
    $link = l('reset filters', $parsed_url['path'], array('query' => $parsed_url['query']));
    $content = '<pre style="display:none">'.print_r(drupal_get_breadcrumb(),true).'</pre><div class="dc-filter-anew">' . $link .'</div>';
  }
  return $content;
}

/**
 * Renders the show more link for collection "featured" block.
 */
function uvl_blocks_featured_readmore_content() {
  $content = '';

  // Get the collection node object from current url.
  $alias = drupal_get_path_alias();
  $path = drupal_lookup_path("source", $alias);
  $node = menu_get_object("node", 1, $path);
  if (!empty($cid = $node->field_collection_id[LANGUAGE_NONE][0]['safe_value'])) {
    // Generate link with query parameters for Islandora Solr search.
    $content = l(t(variable_get('featured_link_title', 'See all items')),
      '/islandora/search',
      array(
      'query' => array(
        'islandora_solr_search_navigation' => 1,
        'f[0]' => 'RELS_EXT_isMemberOfCollection_uri_ms:"info\:fedora\/' . $cid . '"'
      ),
      'attributes' => array(
        'class' => 'solr-more-link see-all-items'
      )
    ));
  }
  return $content;
}

/**
 * Renders the search results for collection "featured" block.
 */
function uvl_blocks_featured_search_content() {
  $content = '';

  $path = current_path();
  $pathparts = explode('/', $path);
  $pid = $pathparts[2];

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'collection', '=')
        ->propertyCondition('status', NODE_PUBLISHED)
        ->fieldCondition('field_collection_id', 'value', $pid, '=')
        ->range(0, 1);
  $result = $query->execute();

  if (isset($result['node'])) {
    $obj = end($result['node']);
    if (is_object($obj)) {
       $node_id = $obj->nid;
       $node = node_load($node_id);

      // Only display block content when field_all_items_link is set.
      if ($node && !empty($node->field_solr_query_featured[LANGUAGE_NONE][0]['value'])) {
        $query = $node->field_solr_query_featured[LANGUAGE_NONE][0]['value'];
        if (!empty($query)) {
          if (module_load_include('inc', 'islandora_solr', 'includes/results')) {
            $qp = new IslandoraSolrQueryProcessor();
            $qp->buildQuery($query);
            $qp->executeQuery();
            $solrresult = $qp->islandoraSolrResult;
            if (isset($solrresult['response']['numFound']) && $solrresult['response']['numFound'] > 0) {
              $show_list = TRUE;
              if ($show_list === TRUE) {
                $islandoraSolrResults = new IslandoraSolrResults();
              }
              else {
                $islandoraSolrResults = new IslandoraSolrResultsGrid();
              }
              $content = $islandoraSolrResults->printResults($solrresult);
            }
          }
        }
      }
    }
  }

  return $content;
}

/**
 * Helper function to query nodes by Islandora object ID string.
 *
 * @param string $pid
 *   The Islandora object identifier.
 *
 * @return array
 *   Array with entity identifiers.
 */
function _uvl_blocks_query_node_by_field($pid) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'collection', '=')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_collection_id', 'value', $pid, '=')
    ->range(0, 1)
    ->addMetaData('account', user_load(1));

  return $query->execute();
}
